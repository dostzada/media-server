volumes:
  rflood_config:
  torrents:
  prowlarr:

services:
  # Torrent Clients
  pia:
    image: qmcgaw/gluetun:v3.40
    container_name: pia
    # init: true
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    environment:
      - VPN_SERVICE_PROVIDER=private internet access
      - OPENVPN_USER=${PIA_USERNAME}
      - OPENVPN_PASSWORD=${PIA_PASSWORD}
      - SERVER_REGIONS=CA Montreal
      - OPENVPN_PROTOCOL=udp
      - NONROOT=no
      - DOT=on
      - BLOCK_MALICIOUS=on
      - BLOCK_SURVEILLANCE=off
      - UNBLOCK=
      - FIREWALL=on
      - FIREWALL_OUTBOUND_SUBNETS=
      - HTTPPROXY=on
      - HTTPPROXY_LOG=true
      - HTTPPROXY_USER=${HTTP_PROXY}
      - HTTPPROXY_PASSWORD=${HTTP_PASSWORD}
      - SHADOWSOCKS=on
      - SHADOWSOCKS_LOG=on
      - SHADOWSOCKS_PASSWORD=${SHADOW_PASSWORD}
    network_mode: bridge
    volumes:
      - ./servarr/gluetun/private-internet-access:/gluetun
    ports:
      # pia
      - 8080:8080/tcp
      - 8080:8080/tcp
      - 8388:8388/udp
      - 9091:9091
      - 6881:6881
      - 6881:6881/udp
    restart: unless-stopped

  qbittorrent:
    image: ghcr.io/hotio/qbittorrent:release-5.0.4
    container_name: qbittorrent
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORTS=8080/tcp,8080/udp
      - TORRENTING_PORT=6881
    volumes:
      - ./servarr/qbit/config:/config
      - /mnt/truenas/media/torrents:/downloads #optional
    depends_on:
      - pia
    network_mode: service:pia
    restart: unless-stopped

  prowlarr:
    container_name: prowlarr
    image: ghcr.io/hotio/prowlarr:release-28212d6
    ports:
      - "9696:9696"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=002
      - TZ=${TZ}
    volumes:
      - prowlarr:/config
    depends_on:
      - flaresolverr
  flaresolverr:
    # DockerHub mirror flaresolverr/flaresolverr:latest
    image: ghcr.io/flaresolverr/flaresolverr:v3.3.21
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TZ}
    ports:
      - "${PORT:-8191}:8191"
    restart: unless-stopped

  # Add the Arr Apps
  radarr:
    image: linuxserver/radarr:5.19.3
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./servarr/radarr/config:/config
      - /mnt/truenas/media/media/movies:/movies
      - /mnt/truenas/media/torrents:/downloads
    ports:
      - 7878:7878
    restart: unless-stopped
  # Sonarr for TV Shows
  sonarr:
    image: linuxserver/sonarr:4.0.13
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./servarr/sonarr/config:/config
      - /mnt/truenas/media/media/tv:/tv
      - /mnt/truenas/media/torrents:/downloads
    ports:
      - 8989:8989
    restart: unless-stopped

  # CWA for books
  calibre-web-automated:
    image: crocodilestick/calibre-web-automated:V3.0.4
    container_name: calibre-web-automated
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      # CW users migrating should stop their existing CW instance, make a copy of the config folder, and bind that here to carry over all of their user settings ect.
      - ./servarr/cwa/config:/config
      # This is an ingest dir, NOT a library one. All files placed here are REMOVED AFTER PROCESSING
      - ./servarr/cwa/ingest:/cwa-book-ingest
      # If you don't have an existing library, CWA will automatically create one at the bind provided here
      - ./servarr/cwa/library:/calibre-library
    ports:
      - 8083:8083
    restart: unless-stopped

  calibre-web-automated-book-downloader:
    image: ghcr.io/calibrain/calibre-web-automated-book-downloader:20250214
    environment:
      FLASK_PORT: 8084
      FLASK_DEBUG: false
      CLOUDFLARE_PROXY_URL: http://cloudflarebypassforscraping:8000
      INGEST_DIR: /cwa-book-ingest
      BOOK_LANGUAGE: en
    ports:
      - 8084:8084
    # Uncomment the following lines if you want to enable healthcheck
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/request/api/status"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    volumes:
      - ./servarr/cwa/ingest:${INGEST_DIR:-/cwa-book-ingest}

  cloudflarebypassforscraping:
    image: ghcr.io/sarperavci/cloudflarebypassforscraping:latest
    restart: unless-stopped
